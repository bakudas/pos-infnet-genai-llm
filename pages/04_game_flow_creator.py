"""
P√°gina 4: Game Flow Creator
Cria fluxos de jogo detalhados para conceitos de jogos.
"""

import streamlit as st
import sys
import os
from datetime import datetime

# Adiciona o diret√≥rio raiz ao path para importar os m√≥dulos utils
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from utils import GeminiClient, FluxoJogo, render_sidebar

# --- Configura√ß√£o da p√°gina ---
st.set_page_config(layout="wide", page_title="Game Flow Creator - Game Concept Forge")

# --- Renderiza a sidebar ---
render_sidebar()

# --- T√≠tulo e Descri√ß√£o ---
st.title("üéØ Game Flow Creator")
st.markdown("""
    Crie fluxos de jogo completos e otimizados!
    Esta ferramenta desenvolve onboarding, progress√£o de n√≠veis,
    momentos de decis√£o e experi√™ncia do usu√°rio para seu jogo.
""")

# --- Inicializa√ß√£o do cliente Gemini ---
@st.cache_resource
def get_gemini_client():
    """Inicializa e cacheia o cliente Gemini."""
    try:
        return GeminiClient()
    except ValueError as e:
        st.error(f"Erro de configura√ß√£o: {e}")
        st.stop()

client = get_gemini_client()

# --- Fun√ß√£o para exibir fluxo de jogo ---
def display_game_flow(game_flow: FluxoJogo):
    """Exibe o fluxo de jogo de forma estruturada."""

    # Vis√£o geral
    st.subheader("üéØ Vis√£o Geral do Fluxo de Jogo")

    # Onboarding
    with st.expander("üöÄ Onboarding e Tutorial", expanded=True):
        onboarding = game_flow.get('onboarding', {})

        st.markdown(f"**Tutorial:** {onboarding.get('tutorial', 'N/A')}")

        st.markdown("**Primeiros Passos:**")
        primeiros_passos = onboarding.get('primeiros_passos', [])
        if primeiros_passos:
            for i, passo in enumerate(primeiros_passos, 1):
                st.markdown(f"{i}. {passo}")
        else:
            st.info("Nenhum primeiro passo definido.")

        st.markdown("**Objetivos Iniciais:**")
        objetivos = onboarding.get('objetivos_iniciais', [])
        if objetivos:
            for i, objetivo in enumerate(objetivos, 1):
                st.markdown(f"{i}. {objetivo}")
        else:
            st.info("Nenhum objetivo inicial definido.")

    st.markdown("---")

    # Progress√£o
    st.subheader("üìà Progress√£o de N√≠veis")

    with st.expander("üèÜ Estrutura de N√≠veis", expanded=True):
        progressao = game_flow.get('progressao', {})

        st.markdown(f"**Estrutura:** {progressao.get('estrutura_niveis', 'N/A')}")

        st.markdown("**Desbloqueios:**")
        desbloqueios = progressao.get('desbloqueios', [])
        if desbloqueios:
            for i, desbloqueio in enumerate(desbloqueios, 1):
                st.markdown(f"{i}. {desbloqueio}")
        else:
            st.info("Nenhum desbloqueio definido.")

        st.markdown("**Momentos Chave:**")
        momentos_chave = progressao.get('momentos_chave', [])
        if momentos_chave:
            for i, momento in enumerate(momentos_chave, 1):
                st.markdown(f"{i}. {momento}")
        else:
            st.info("Nenhum momento chave definido.")

    st.markdown("---")

    # Decis√µes do Jogador
    st.subheader("ü§î Momentos de Decis√£o")

    with st.expander("üéØ Decis√µes do Jogador", expanded=True):
        decisoes = game_flow.get('decisoes_jogador', [])
        if decisoes:
            for i, decisao in enumerate(decisoes, 1):
                st.markdown(f"**Decis√£o {i}:** {decisao}")
        else:
            st.info("Nenhuma decis√£o do jogador definida.")

    # Checkpoints
    with st.expander("üìç Pontos de Checkpoint"):
        checkpoints = game_flow.get('checkpoints', [])
        if checkpoints:
            for i, checkpoint in enumerate(checkpoints, 1):
                st.markdown(f"**Checkpoint {i}:** {checkpoint}")
        else:
            st.info("Nenhum checkpoint definido.")

    st.markdown("---")

    # Fluxo de Monetiza√ß√£o
    st.subheader("üí∞ Fluxo de Monetiza√ß√£o")

    with st.expander("üí≥ Monetiza√ß√£o", expanded=True):
        fluxo_monetizacao = game_flow.get('fluxo_monetizacao', [])
        if fluxo_monetizacao:
            for i, monetizacao in enumerate(fluxo_monetizacao, 1):
                st.markdown(f"{i}. {monetizacao}")
        else:
            st.info("Nenhum fluxo de monetiza√ß√£o definido.")

    st.markdown("---")

    # Experi√™ncia do Usu√°rio
    st.subheader("üë§ Experi√™ncia do Usu√°rio")

    experiencia = game_flow.get('experiencia_usuario', {})

    col1, col2 = st.columns(2)

    with col1:
        with st.expander("‚≠ê Pontos Altos", expanded=True):
            pontos_alto = experiencia.get('pontos_alto', [])
            if pontos_alto:
                for ponto in pontos_alto:
                    st.markdown(f"‚Ä¢ {ponto}")
            else:
                st.info("Nenhum ponto alto definido.")

    with col2:
        with st.expander("‚ö†Ô∏è Pontos de Aten√ß√£o"):
            pontos_baixo = experiencia.get('pontos_baixo', [])
            if pontos_baixo:
                for ponto in pontos_baixo:
                    st.markdown(f"‚Ä¢ {ponto}")
            else:
                st.info("Nenhum ponto de aten√ß√£o definido.")

    # Otimiza√ß√µes
    with st.expander("üîß Otimiza√ß√µes Sugeridas", expanded=True):
        otimizacoes = experiencia.get('otimizacoes', [])
        if otimizacoes:
            for i, otimizacao in enumerate(otimizacoes, 1):
                st.markdown(f"**{i}.** {otimizacao}")
        else:
            st.info("Nenhuma otimiza√ß√£o sugerida.")

    st.markdown("---")
    st.success("Fluxo de jogo criado! Use essas informa√ß√µes para implementar a experi√™ncia do usu√°rio.")

# --- Interface principal ---
st.markdown("### üéÆ Conceito para Cria√ß√£o do Fluxo de Jogo")

# Verifica se h√° um conceito na sess√£o
if 'current_gdd' in st.session_state and 'current_concept' in st.session_state:
    st.info("üìã Usando conceito atual da sess√£o")
    current_concept = st.session_state['current_concept']
    current_gdd = st.session_state['current_gdd']

    # Exibe informa√ß√µes do conceito atual
    with st.expander("üìã Conceito Atual"):
        st.markdown(f"**T√≠tulo:** {current_gdd.get('titulo_provisorio', 'Sem t√≠tulo')}")
        st.markdown(f"**G√™nero:** {current_gdd.get('genero', 'N/A')}")
        st.markdown(f"**Plataformas:** {', '.join(current_gdd.get('plataformas_alvo', ['N/A']))}")

    # Permite editar o conceito para cria√ß√£o do fluxo
    concept_for_flow = st.text_area(
        "Edite o conceito para cria√ß√£o do fluxo de jogo (opcional):",
        value=current_concept,
        height=100
    )
else:
    st.warning("‚ö†Ô∏è Nenhum conceito encontrado na sess√£o. Gere um conceito primeiro ou insira um manualmente.")
    concept_for_flow = st.text_area(
        "Descreva o conceito de jogo para cria√ß√£o do fluxo:",
        placeholder="Ex: Um jogo de cartas onde os jogadores constroem baralhos baseados em personagens hist√≥ricos...",
        height=150
    )

# Op√ß√µes de cria√ß√£o
with st.expander("‚öôÔ∏è Op√ß√µes de Cria√ß√£o"):
    flow_type = st.selectbox(
        "Tipo de Fluxo:",
        ["Linear", "N√£o-Linear", "Sandbox", "H√≠brido"],
        index=0
    )

    target_audience = st.selectbox(
        "P√∫blico-Alvo:",
        ["Casual", "Core", "Hardcore", "Familiar"],
        index=0
    )

    monetization_type = st.selectbox(
        "Tipo de Monetiza√ß√£o:",
        ["Freemium", "Premium", "Subscription", "Ads", "H√≠brido"],
        index=0
    )

    include_onboarding = st.checkbox("Incluir onboarding detalhado", value=True)
    include_monetization = st.checkbox("Incluir fluxo de monetiza√ß√£o", value=True)

# --- Bot√£o de cria√ß√£o ---
if st.button("üéØ Criar Fluxo de Jogo", type="primary") and concept_for_flow:
    with st.spinner("Criando fluxo de jogo detalhado..."):
        try:
            # Gera o fluxo de jogo
            game_flow = client.create_game_flow(concept_for_flow)

            # Exibe o resultado
            display_game_flow(game_flow)

            # Salva na sess√£o
            st.session_state['game_flow'] = game_flow
            st.session_state['flow_concept'] = concept_for_flow

            # Adiciona ao hist√≥rico
            if 'flow_history' not in st.session_state:
                st.session_state.flow_history = []

            st.session_state.flow_history.append({
                'concept': concept_for_flow,
                'flow': game_flow,
                'date': datetime.now().strftime("%Y-%m-%d %H:%M"),
                'type': flow_type,
                'audience': target_audience
            })

        except Exception as e:
            st.error(f"Erro ao criar fluxo de jogo: {e}")
            st.info("Verifique se sua chave de API est√° configurada corretamente.")

# --- Hist√≥rico de fluxos ---
if 'flow_history' in st.session_state and st.session_state.flow_history:
    with st.expander("üìö Hist√≥rico de Fluxos"):
        for i, flow_record in enumerate(st.session_state.flow_history):
            st.markdown(f"**{i+1}. Fluxo {flow_record['type']}** - {flow_record['date']}")
            st.markdown(f"*P√∫blico: {flow_record['audience']}*")
            if st.button(f"Carregar fluxo {i+1}", key=f"load_flow_{i}"):
                st.session_state['game_flow'] = flow_record['flow']
                st.session_state['flow_concept'] = flow_record['concept']
                st.rerun()

# --- Se√ß√£o de ajuda ---
with st.expander("‚ùì Como criar um bom fluxo de jogo"):
    st.markdown("""
    **Um fluxo de jogo eficaz deve:**

    1. **Onboarding suave:** Introduzir mec√¢nicas gradualmente
    2. **Progress√£o clara:** Sensa√ß√£o de evolu√ß√£o constante
    3. **Decis√µes significativas:** Escolhas que impactam o jogo
    4. **Checkpoints estrat√©gicos:** Pontos de salvamento bem posicionados
    5. **Monetiza√ß√£o natural:** Integrada sem ser intrusiva

    **Elementos essenciais:**
    - **Tutorial interativo:** Aprender fazendo
    - **Curva de dificuldade:** Desafio crescente
    - **Feedback constante:** Informa√ß√µes claras sobre progresso
    - **Variedade:** Diferentes tipos de conte√∫do
    - **Recompensas:** Satisfa√ß√£o imediata e de longo prazo

    **Exemplos de fluxos bem-sucedidos:**
    - **Candy Crush:** Tutorial ‚Üí N√≠veis progressivos ‚Üí Power-ups
    - **Clash Royale:** Tutorial ‚Üí Arena ‚Üí Desbloqueios ‚Üí Cl√£s
    - **Minecraft:** Tutorial ‚Üí Sobreviv√™ncia ‚Üí Explora√ß√£o ‚Üí Constru√ß√£o
    """)

# --- Exportar fluxo ---
if 'game_flow' in st.session_state:
    st.markdown("---")
    st.markdown("### üì§ Exportar Fluxo de Jogo")

    col1, col2 = st.columns(2)
    with col1:
        if st.button("üìÑ Exportar como JSON"):
            import json
            flow_data = {
                'concept': st.session_state.get('flow_concept', ''),
                'flow': st.session_state['game_flow'],
                'date': datetime.now().isoformat()
            }
            st.download_button(
                label="‚¨áÔ∏è Download JSON",
                data=json.dumps(flow_data, indent=2, ensure_ascii=False),
                file_name=f"game_flow_{datetime.now().strftime('%Y%m%d_%H%M')}.json",
                mime="application/json"
            )

    with col2:
        if st.button("üìä Gerar Diagrama"):
            st.info("Funcionalidade de diagrama em desenvolvimento!")

# --- Visualiza√ß√£o do fluxo ---
if 'game_flow' in st.session_state:
    st.markdown("---")
    st.markdown("### üéØ Visualiza√ß√£o do Fluxo")

    # Cria um fluxograma simples
    game_flow = st.session_state['game_flow']

    # Onboarding
    onboarding = game_flow.get('onboarding', {})
    if onboarding.get('primeiros_passos'):
        st.markdown("**Fluxo de Onboarding:**")
        for i, passo in enumerate(onboarding['primeiros_passos'], 1):
            if i < len(onboarding['primeiros_passos']):
                st.markdown(f"**{i}.** {passo} ‚Üí")
            else:
                st.markdown(f"**{i}.** {passo} ‚úÖ")

    # Progress√£o
    progressao = game_flow.get('progressao', {})
    if progressao.get('momentos_chave'):
        st.markdown("**Momentos Chave da Progress√£o:**")
        for i, momento in enumerate(progressao['momentos_chave'], 1):
            st.markdown(f"**{i}.** {momento}")

    # Decis√µes
    decisoes = game_flow.get('decisoes_jogador', [])
    if decisoes:
        st.markdown("**Pontos de Decis√£o:**")
        for i, decisao in enumerate(decisoes, 1):
            st.markdown(f"**{i}.** {decisao} ü§î")